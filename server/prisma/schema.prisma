generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Users {
  user_id    String      @id @default(uuid())
  first_name String
  last_name  String
  username   String
  password   String
  email      String      @unique
  image      String?
  role       Role        @default(Student)
  comment    Comments[]
  professors Professors?
  students   Students?
}

model Students {
  student_id       String            @id @default(uuid())
  user_id          String            @unique
  job              String?
  user             Users             @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  enroll           StudentsEnroll[]  @relation("StudentEnrollments")
  course_rating    CourseRating[]
  professor_rating ProfessorRating[]
}

model Professors {
  professor_id     String            @id @default(uuid())
  user_id          String            @unique
  info             String?
  course           Course[]
  // professor_course ProfessorCourse? @relation("ProfessorCourses")
  user             Users             @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  professor_rating ProfessorRating[]
}

model Course {
  course_id     String           @id @default(uuid())
  title         String
  description   String?          @db.VarChar(255)
  price         Int
  level         String
  received      String
  create_date   DateTime         //@default(now())
  end_date      DateTime
  professor_id  String
  start_date    DateTime
  status        Boolean
  thumbnail     String?
  comments      Comments[]
  professor     Professors       @relation(fields: [professor_id], references: [professor_id], onDelete: Cascade)
  course_rating CourseRating[]
  enrolled      StudentsEnroll[] @relation("CourseEnrollments")
}

model Comments {
  comment_id String @id @default(uuid())
  content    String
  user_id    String
  course_id  String
  course     Course @relation(fields: [course_id], references: [course_id], onDelete: Cascade)
  user       Users  @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model CourseRating {
  course_rating_id String   @id @default(uuid())
  course_id        String
  student_id       String
  course           Course   @relation(fields: [course_id], references: [course_id], onDelete: Cascade)
  student          Students @relation(fields: [student_id], references: [student_id], onDelete: Cascade)
}

model ProfessorRating {
  professor_rating_id String     @id @default(uuid())
  professor_id        String
  student_id          String
  professor           Professors @relation(fields: [professor_id], references: [professor_id], onDelete: Cascade)
  student             Students   @relation(fields: [student_id], references: [student_id], onDelete: Cascade)
}

model StudentsEnroll {
  student_id  String
  course_id   String
  enroll_date DateTime
  course      Course   @relation("CourseEnrollments", fields: [course_id], references: [course_id], onDelete: Cascade)
  student     Students @relation("StudentEnrollments", fields: [student_id], references: [student_id], onDelete: Cascade)

  @@id([student_id, course_id])
}

enum Role {
  Student
  Professor
  Admin
}

