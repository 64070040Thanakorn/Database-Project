generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id Int @id @default(autoincrement())
  first_name String
  last_name String
  username String
  password String
  email String @unique
  image String?
  role Role @default(Student)
  students Students[]
  professors Professors[]
  comment Comments[]
}

enum Role {
  Student
  Professor
  Admin
}

model Students{
  id String @id @default(uuid())
  user_id Int @unique
  job String?
  
  user Users  @relation(fields: [user_id], references: [id])
  enroll StudentsEnroll[] @relation("StudentEnrollments")
  professor_raing ProfessorRating[]
  course_rating CourseRating[]

}

model Professors{
  id String @id @default(uuid())
  user_id Int @unique
  info String?

  user Users  @relation(fields: [user_id], references: [id])
  course Course[]
  professor_raing ProfessorRating[]
  professor_course ProfessorCourse[] @relation("ProfessorCourses")
}

model Course {
  id          Int @id @default(autoincrement())
  professor_id String @unique
  title       String
  thunbnail  String?
  description String?
  create_date DateTime
  start_date DateTime
  end_date DateTime
  status Boolean

  professor Professors @relation(fields: [professor_id], references: [id])
  professors_course  ProfessorCourse[] @relation("CourseProfessors")
  enrolled    StudentsEnroll[] @relation("CourseEnrollments")

  course_rating CourseRating[]
  comments    Comments[]
}

model Comments {
  comment_id Int @id @default(autoincrement())
  content   String
  user_id Int @unique
  course_id  Int @unique

  user Users @relation(fields: [user_id], references: [id])
  course Course @relation(fields: [course_id], references: [id])
}

model ProfessorRating {
  id        Int      @id @default(autoincrement())
  professor_id String @unique
  student_id String @unique
  rating Int

  professor Professors @relation(fields: [professor_id], references: [id])
  student   Students  @relation(fields: [student_id], references: [id])
}

model CourseRating {
  id        Int      @id @default(autoincrement())
  course_id Int @unique
  student_id String @unique

  student   Students  @relation(fields: [student_id], references: [id])
  course    Course   @relation(fields: [course_id], references: [id])
}

model ProfessorCourse {
  professor_id String @unique
  course_id    Int @unique

  professor   Professors @relation(fields: [professor_id], references: [id], name: "ProfessorCourses")
  course      Course    @relation(fields: [course_id], references: [id], name: "CourseProfessors")
}

model StudentsEnroll {
  student_id String @unique
  course_id  Int @unique
  enroll_date DateTime

  student   Students @relation(fields: [student_id], references: [id], name: "StudentEnrollments")
  course    Course  @relation(fields: [course_id], references: [id], name: "CourseEnrollments")
}